<?php

if (!defined("__ONS_COMMON__"))
    include_once('ons_common.php');

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-05-19 at 22:27:47.
 */
class dbRootTest extends PHPUnit_Framework_TestCase {

    public $loadDB;

    function testInitaliseDatabase() {        
        $this->assertTrue(LoadDatabase::testInitaliseDatabase());
    }

    /**
     * @depends testInitaliseDatabase
     * 
     */
    public function testFromCache() {
        global $dbTables;
        $defs = dbRoot::fromCache("Defaults", 1);
        $this->assertNotNull($defs);
        $this->assertEquals("bhs", $defs->ShowName);
    }

    /**
     * @depends testFromCache
     */
    function testDefaultsCached() {
        $defs1 = dbRoot::fromCache("Defaults", 1);
        $defs2 = dbRoot::fromCache("Defaults", 1);

        $this->assertSame($defs1, $defs2);
    }
    
    /**
     * @depends testFromCache
     * @todo
     */
    function testAddToCache(){
        //Get DB Object
    }
    /**
     * @depends testFromCache
     * @todo
     */
    function testAddToCacheNoDupe(){
        //Get DB Object
    }
    
    /**
     * @covers dbRoot::clearCache
     */
    public function testClearCache() {
        global $dbTables;
        $defs1 = dbRoot::fromCache("Defaults", 1);
        dbRoot::clearCache("Defaults");
        $this->assertArrayNotHasKey("Defaults", $dbTables);
    }
        
    /**
     * @todo   Implement testGetTables().
     */
    public function testGetTables() {
        $tables = dbRoot::getTables();
        //N.B. strtolower it so its consitent case.
        $tables = array_map('strtolower', $tables);
        //N.B. asort it so its alphabetical.        
        sort($tables);

        $this->assertEquals(
                array(
            'class',
            'defaultexhibitionclass',
            'defaultexhibitionclassprize',
            'defaultexhibitionexhibitor',
            'defaultexhibitionsection',
            'defaultexhibitiontrophyclass',
            'defaultprizefund',
            'defaults',
            'exhibition',
            'exhibitionclass',
            'exhibitionclassprize',
            'exhibitionexhibitor',
            'exhibitionsection',
            'exhibitiontrophyclass',
            'exhibitor',
            'prize',
            'section',
            'sponsorship',
            'trophy',
            'trophyresults')
                , $tables);
    }
    
    /**
     * @depends testInitaliseDatabase
     * @todo 
     * @medium
     */
    public function testBackupDB() {
        $temp=buildPath(__DIR__,"backup.xml");
        file_put_contents($temp, dbRoot::BackupDB());
        //$this->assertXmlFileEqualsXmlFile(buildPath(__DIR__,"..","testData","ShowManager","Summer2013.xml"),$temp);
    }
    
    /**
     * @depends testInitaliseDatabase
     */
    public function testCalculatePrizeFund(){
        $doPre=safe_dataobject_factory("Exhibitionclassprize");
        $this->assertEquals(1922,$doPre->find());        
        dbRoot::CalculatePrizeFund();
        $doPost=safe_dataobject_factory("Exhibitionclassprize");
        $this->assertEquals(2043,$doPost->find());
    }
    
    
    
    
    /**
     * @depends testInitaliseDatabase
     * @todo dbRoot::Import($filename);
     */
    
    /**
     * @depends testInitaliseDatabase
     * @todo dbRoot::addToCache($dataobject);
     */
    
    /**
     * @depends testInitaliseDatabase
     * @todo dbRoot::buildPage($type);
     */
    
    /**
     * @depends testInitaliseDatabase
     * @todo dbRoot::getImportMap($table, $key);
     */
    
    /**
     * @depends testInitaliseDatabase
     * @todo dbRoot::getObjectValue($name, $object);
     */
    
    /**
     * @depends testInitaliseDatabase
     * @todo dbRoot::importMap($table, $key);
     */
    
    /**
     * @depends testInitaliseDatabase
     * @todo dbRoot::showPage($type);
     */

    
}
